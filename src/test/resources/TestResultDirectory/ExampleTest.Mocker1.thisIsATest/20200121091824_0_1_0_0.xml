<testResults>
    <FitNesseVersion>v20200108</FitNesseVersion>
    <rootPath>FitNesse.UserGuide.TwoMinuteExample</rootPath>
    <result>
        <counts>
            <right>5</right>
            <wrong>1</wrong>
            <ignores>0</ignores>
            <exceptions>0</exceptions>
        </counts>
        <date>2020-01-21T09:18:24+01:00</date>
        <runTimeInMillis>602</runTimeInMillis>
        <content>
            <a href="?recentTestHistory"><span class="btn btn-primary">Test History</span></a> <a href="?pageHistory"><span class="btn btn-primary">Page History</span></a> <a href="?properties"><span class="btn btn-secondary">Properties</span></a><br/><hr/> <br/><div class="collapsible invisible"><ul><li><a href='#' class='expandall'>Expand</a></li><li><a href='#' class='collapseall'>Collapse</a></li></ul> <p class="title">Hidden</p> <div><br/><span class="meta">variable defined: TEST_SYSTEM=slim</span> <br/></div> </div> <h1 id="AnExampleFitNesseTest">An Example FitNesse Test</h1> If you were testing the division function of a calculator application, you might like to see some examples working. You might want to see what you get back if you ask it to divide 10 by 2. (You might be hoping for a 5!)<br/><br/>In FitNesse, tests are expressed as tables of <b>input</b> data and <b>expected output</b> data. Here is one way to specify a few division tests in FitNesse:<br/><br/><table> <tr class="slimRowTitle"> <td colspan="3"><span class="pass">eg.Division</span></td> </tr> <tr class="slimRowTitle"> <td>numerator</td> <td>denominator</td> <td>quotient?</td> </tr> <tr class="slimRowColor1"> <td>10</td> <td>2</td> <td><span class="pass">5.0</span></td> </tr> <tr class="slimRowColor0"> <td>12.6</td> <td>3</td> <td><span class="pass">4.2</span></td> </tr> <tr class="slimRowColor1"> <td>22</td> <td>7</td> <td><span class="pass">3.142857142857143~=3.14</span></td> </tr> <tr class="slimRowColor0"> <td>9</td> <td>3</td> <td><span class="pass">3.0&lt;5</span></td> </tr> <tr class="slimRowColor1"> <td>11</td> <td>2</td> <td><span class="pass">4&lt;5.5&lt;6</span></td> </tr> <tr class="slimRowColor0"> <td>100</td> <td>4</td> <td>[<span class="diff">25.0</span>] <span class="fail">expected [<span class="diff">33</span>]</span></td> </tr> </table> <br/>This style of FitNesse test table is called a <a href="FitNesse.UserGuide.WritingAcceptanceTests.SliM.DecisionTable">Decision Table</a>, each row represents a complete scenario of example inputs and outputs. Here, the "numerator" and "denominator" columns are for inputs, and the question mark in the "quotient?" column tells FitNesse that this is our column of expected outputs. Notice our "10/2 = 5.0" scenario. Try reading it as a question: <i>"If I give you a numerator of 10 and denominator of 2, do I get back a 5?"</i><br/><br/><h3 id="RunningourtesttableClicktheTestbutton">Running our test table: Click the Test button</h3> If you are reading this page on a local copy of FitNesse, run this test table. See the <b>Test</b> button in the top bar next to the FitNesse logo? Click it and see what happens.<br/><br/><div class="collapsible"><ul><li><a href='#' class='expandall'>Expand</a></li><li><a href='#' class='collapseall'>Collapse</a></li></ul> <p class="title">Now, if you're reading this on the web site, ...</p> <div><br/>... you probably found that the <span class="fitnesse">FitNesse</span> Test button in that example didn't work as advertised. It's been disabled on purpose to minimize stress on the site. But that's ok - since among other things, <span class="fitnesse">FitNesse</span> is a wiki, you can simply download and run it, and read these same web pages as served up by your local system. When you do that, you'll be able to run the tests. Why not <a href="http://fitnesse.org/FitNesseDownload">download it now</a>?<br/><br/></div> </div> Ah, color! In the green cells, we got back the expected values from our code. When we divided 10 by 2, we expected and got back 5. When we divided 12.6 by 3, we expected and got back 4.2.<br/><br/>What about red? A cell turns red when we get back a different value than what we expected. We also see two values: the <b>expected</b> value and the <b>actual</b> value. Above we expected 33 back when we divided 100 by 4, but we got back 25. Ah, a flaw in our test table. That happens!<br/><br/>Notice also the comparisons. 22/7 is approximately equal (~=) to 3.14. 9/3 is less than 5. 11/2 is between 4 and 6.<br/><br/><h3 id="CreatingtheTable">Creating the Table</h3> How did we put that test table on this page in the first place? Well, we used FitNesse itself to do it!<br/><br/>FitNesse is a <a href="http://wiki.org/wiki.cgi?WhatIsWiki">wiki</a>, which is a style of web server that allows any visitor to make any edits, including changing existing pages and creating new pages. A simple markup language lets you easily create headings, make text bold, underline, and italic, create bulleted lists, and do other kinds of simple formatting. You can read more about it on <a href="FitNesse.UserGuide.FitNesseWiki.EditingFitNessePages">Editing <span class="fitnesse">FitNesse</span> Pages</a>.<br/><br/>Once you download FitNesse to your own computer, you can edit any page simply by clicking on the Edit button on the left (just below the Test button). If you are reading this page on your own copy of FitNesse on your own machine, you can click the Edit button and see for yourself.<br/><br/>The wiki markup for our table above (with some omissions) looks like this:<pre>|eg.Division| |numerator|denominator|quotient?| |10 |2 |5 | |12.6 |3 |4.2 | |100 |4 |33 |</pre> The vertical bars delimit table cells. For this table, there is not much more to it than that. You don't have to line up the vertical bars this way; we just do it to make it easier to read.<br/><br/>Note that if you don't like mucking about with a markup language at all, you can create your test tables in a spreadsheet such as Excel, copy them to the clipboard, and use the <b>Spreadsheet to Fitnesse</b> button on the Edit page to have <span class="fitnesse">FitNesse</span> format your table properly for you.<br/><br/><b>Note</b> also that if you change "eg.Division" to any other name, you may need to use a ! before the fixture to avoid confusing <span class="fitnesse">FitNesse</span> with <a href="FitNesse.FullReferenceGuide.UserGuide.FitNesseWiki.WikiWord">WikiWord</a>s (see <a href="FitNesse.FullReferenceGuide.UserGuide.FitNesseWiki.MarkupLanguageReference.MarkupTable">Markup Table</a>)<br/><br/><h3 id="FixtureCode">Fixture Code</h3> What <b>really</b> happens when we click that test button? (Try clicking it again.) What gets run?<br/><br/><ul> <li>First, <span class="fitnesse">FitNesse</span> submits the test table to <a href="FitNesse.UserGuide.WritingAcceptanceTests.SliM">Slim</a>, the underlying test system (a test system contains the code required to actually perform the tests).</li> <li>Slim looks for and runs the fixture code corresponding to the test table.</li> <li>By design, the fixture code calls some underlying application code to do the real work, and report results back to the fixture</li> <li>Fit gives Fitnesse back the results from running the fixture code</li> <li><span class="fitnesse">FitNesse</span> figures out whether to turn table cells red or green (or yellow, if an exception was thrown) and displays the results page accordingly</li> </ul> <br/><h3 id="WhatisFixtureCode">What is Fixture Code?</h3> The fixture is the Java (or some other supported language) class that Slim will use to process the contents of the table. In the top row of the table above, "eg" specifies a Java package (or other language namespace), and "Division" specifies the actual class to be called.<br/><br/>Here is what the Java version of the Division class might look like:<pre> public class Division { private double numerator, denominator; public void setNumerator(double numerator) { this.numerator = numerator; } public void setDenominator(double denominator) { this.denominator = denominator; } public double quotient() { return numerator/denominator; } } </pre> <br/><br/><h3 id="HowSlimUsesFixtureCodetoProcesstheTestTable">How Slim Uses Fixture Code to Process the Test Table</h3> The Division table is an example of a <a href="FitNesse.UserGuide.WritingAcceptanceTests.SliM.DecisionTable">Decision Table</a>; just one of many different kinds of tables. Slim processes the rows of example data (<b>from left to right</b>), it stores the values from the <i>numerator</i> and <i>denominator</i> columns in the corresponding fields in our Division class using the setter functions. For each row, it then calls the quotient() method on our Division class, which returns what we would expect it to: the numerator divided by the denominator. So the Decision Table directs Slim to call setNumerator(10) and setDenominator(2); and then to call quotient(). The value is returned to the Decision Table which colors the appropriate cell.<br/><br/>Click the Test button again and see what happens to the column of expected outputs under the <i>quotient?</i> header. For each cell of expected output, the Decision Table compares the value it expects to get back with what it actually gets. If the return value matches the value in the corresponding table cell, <span class="fitnesse">FitNesse</span> turns the cell green. Otherwise <span class="fitnesse">FitNesse</span> turns the cell red, and shows both the expected and actual values. (If Slim encounters an exception, or cannot find a fixture, field, or method, it turns the corresponding table cell yellow, and inserts a stack trace.)<br/><br/><h3 id="WaitaMinute.ThatsTooSimple.">Wait a Minute. That's <i>Too</i> Simple.</h3> How right you are. In the real world, the fixture code would not be doing any of the real work (though a single division operation is not much work). The fixture code would delegate to real application code, which in turn would do the work. In general, fixture code should be <b>as thin as possible</b>. It should be nothing but <b>piping and wiring</b> between the <span class="fitnesse">FitNesse</span> table and the application code under test.<br/><br/>So with that bit of wisdom in our minds, you can have a look at <a href="FitNesse.UserGuide.WritingAcceptanceTests.FixtureCode">something a bit more realistic</a>.<br/><br/><h3 id="LearningMore">Learning More</h3> <h4 id="MoreTechnicalDetail...">More Technical Detail...</h4> If you are more interested in learning how to create the code that makes test tables work, see <a href="FitNesse.FullReferenceGuide.UserGuide.WritingAcceptanceTests.FixtureCode">Fixture Code</a>. If you want to start diving into installing and running <span class="fitnesse">FitNesse</span>, check out <a href="http://fitnesse.org/FitNesseDownload">fitnesse.org</a>.<br/><br/><h4 id="MoreUsageDetail...">More Usage Detail...</h4> If you are more interested in why and how to get teams to use <span class="fitnesse">FitNesse</span>, see <a href="FitNesse.UserGuide.AcceptanceTests">Acceptance Tests</a>. If you want to learn how to create and run <span class="fitnesse">FitNesse</span> tests, check out <a href="FitNesse.FullReferenceGuide.UserGuide.FitNesseWiki.EditingFitNessePages">Editing <span class="fitnesse">FitNesse</span> Pages</a>, <a href="FitNesse.FullReferenceGuide.UserGuide.WritingAcceptanceTests">Creating Test Tables</a>, and <a href="FitNesse.FullReferenceGuide.UserGuide.WritingAcceptanceTests.SliM">Test Table Styles</a>.<br/><br/><h4 id="OrTakeYourOwnPath">Or Take Your Own Path</h4> Finally, if you want to zoom back out and look at all of the <span class="fitnesse">FitNesse</span> topics, check out the table of contents on the <a href="FitNesse.UserGuide">&lt;User Guide</a>.<br/>
        </content>
        <relativePageName>TwoMinuteExample</relativePageName>
        <instructions>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_0', instruction='make', instanceName='decisionTable_0', className='eg.Division', args=[]}
                </instruction>
                <slimResult>pass(eg.Division)</slimResult>
                <expectation>
                    <status>pass</status>
                    <instructionId>decisionTable_0_0</instructionId>
                    <col>0</col>
                    <row>0</row>
                    <type>ConstructionExpectation</type>
                    <evaluationMessage>eg.Division</evaluationMessage>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_4', instruction='call', instanceName='decisionTable_0', methodName='setNumerator', args=[10]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_4</instructionId>
                    <col>0</col>
                    <row>2</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_5', instruction='call', instanceName='decisionTable_0', methodName='setDenominator', args=[2]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_5</instructionId>
                    <col>1</col>
                    <row>2</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_7', instruction='call', instanceName='decisionTable_0', methodName='quotient', args=[]}
                </instruction>
                <slimResult>pass(5.0)</slimResult>
                <expectation>
                    <status>pass</status>
                    <instructionId>decisionTable_0_7</instructionId>
                    <col>2</col>
                    <row>2</row>
                    <type>ReturnedValueExpectation</type>
                    <evaluationMessage>5.0</evaluationMessage>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_9', instruction='call', instanceName='decisionTable_0', methodName='setNumerator', args=[12.6]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_9</instructionId>
                    <col>0</col>
                    <row>3</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_10', instruction='call', instanceName='decisionTable_0', methodName='setDenominator', args=[3]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_10</instructionId>
                    <col>1</col>
                    <row>3</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_12', instruction='call', instanceName='decisionTable_0', methodName='quotient', args=[]}
                </instruction>
                <slimResult>pass(4.2)</slimResult>
                <expectation>
                    <status>pass</status>
                    <instructionId>decisionTable_0_12</instructionId>
                    <col>2</col>
                    <row>3</row>
                    <type>ReturnedValueExpectation</type>
                    <evaluationMessage>4.2</evaluationMessage>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_14', instruction='call', instanceName='decisionTable_0', methodName='setNumerator', args=[22]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_14</instructionId>
                    <col>0</col>
                    <row>4</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_15', instruction='call', instanceName='decisionTable_0', methodName='setDenominator', args=[7]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_15</instructionId>
                    <col>1</col>
                    <row>4</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_17', instruction='call', instanceName='decisionTable_0', methodName='quotient', args=[]}
                </instruction>
                <slimResult>pass(3.142857142857143~=3.14)</slimResult>
                <expectation>
                    <status>pass</status>
                    <instructionId>decisionTable_0_17</instructionId>
                    <col>2</col>
                    <row>4</row>
                    <type>ReturnedValueExpectation</type>
                    <evaluationMessage>3.142857142857143~=3.14</evaluationMessage>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_19', instruction='call', instanceName='decisionTable_0', methodName='setNumerator', args=[9]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_19</instructionId>
                    <col>0</col>
                    <row>5</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_20', instruction='call', instanceName='decisionTable_0', methodName='setDenominator', args=[3]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_20</instructionId>
                    <col>1</col>
                    <row>5</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_22', instruction='call', instanceName='decisionTable_0', methodName='quotient', args=[]}
                </instruction>
                <slimResult>pass(3.0<5)</slimResult>
                <expectation>
                    <status>pass</status>
                    <instructionId>decisionTable_0_22</instructionId>
                    <col>2</col>
                    <row>5</row>
                    <type>ReturnedValueExpectation</type>
                    <evaluationMessage>3.0<5</evaluationMessage>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_24', instruction='call', instanceName='decisionTable_0', methodName='setNumerator', args=[11]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_24</instructionId>
                    <col>0</col>
                    <row>6</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_25', instruction='call', instanceName='decisionTable_0', methodName='setDenominator', args=[2]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_25</instructionId>
                    <col>1</col>
                    <row>6</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_27', instruction='call', instanceName='decisionTable_0', methodName='quotient', args=[]}
                </instruction>
                <slimResult>pass(4<5.5<6)</slimResult>
                <expectation>
                    <status>pass</status>
                    <instructionId>decisionTable_0_27</instructionId>
                    <col>2</col>
                    <row>6</row>
                    <type>ReturnedValueExpectation</type>
                    <evaluationMessage>4<5.5<6</evaluationMessage>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_29', instruction='call', instanceName='decisionTable_0', methodName='setNumerator', args=[100]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_29</instructionId>
                    <col>0</col>
                    <row>7</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_30', instruction='call', instanceName='decisionTable_0', methodName='setDenominator', args=[4]}
                </instruction>
                <slimResult/>
                <expectation>
                    <instructionId>decisionTable_0_30</instructionId>
                    <col>1</col>
                    <row>7</row>
                    <type>VoidReturnExpectation</type>
                </expectation>
            </instructionResult>
            <instructionResult>
                <instruction>
                    {id='decisionTable_0_32', instruction='call', instanceName='decisionTable_0', methodName='quotient', args=[]}
                </instruction>
                <slimResult>fail(a=25.0;e=33)</slimResult>
                <expectation>
                    <status>fail</status>
                    <instructionId>decisionTable_0_32</instructionId>
                    <col>2</col>
                    <row>7</row>
                    <type>ReturnedValueExpectation</type>
                    <actual>25.0</actual>
                    <expected>33</expected>
                </expectation>
            </instructionResult>
        </instructions>
    </result>
    <executionLog>
        <testSystem>slim:fitnesse.slim.SlimService</testSystem>
        <command>
            "C:\Program Files\Java\jdk-11.0.4\bin\java" -cp C:\cleanfit\toolchain-training\wiki\fitnesse-standalone.jar;lib/*.jar fitnesse.slim.SlimService 1
        </command>
        <exitCode>0</exitCode>
        <stdOut/>
        <stdErr/>
    </executionLog>
    <finalCounts>
        <right>0</right>
        <wrong>1</wrong>
        <ignores>0</ignores>
        <exceptions>0</exceptions>
    </finalCounts>
    <totalRunTimeInMillis>1086</totalRunTimeInMillis>
</testResults>